name: Vercel Dev Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DEV_PROJECT_ID }}
on:
  push:
    branches:
      - dev

jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      # TODO:
      # - name: Cache node.js modules
      #   id: cache-step
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}

      # - name: Install dependencies
      #   if: steps.cache-step.outputs.cache-hit != 'true'
      #   run: npm ci

      - name: Install dependencies
        run: npm ci

      - name: Lint source code with ESLint
        run: npx eslint ./src --ext .js,.jsx,.ts,.tsx,.json

  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Cache node.js modules
        id: cache-step
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Install dependencies
        if: steps.cache-step.outputs.cache-hit != 'true'
        run: npm ci

      - name: Lint source code with Prettier
        run: npx prettier --check ./src --ext .js,.jsx,.ts,.tsx,.json

  Deploy-Dev:
    runs-on: ubuntu-latest
    needs: [prettier, eslint]
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
